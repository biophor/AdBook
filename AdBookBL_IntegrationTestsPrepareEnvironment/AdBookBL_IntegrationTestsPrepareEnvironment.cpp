// AdBookBL_IntegrationTestsPrepareEnvironment.cpp : This file contains the 'main' function. Program execution begins and ends there.
//

/*
How to setup the test environment on Windows 10

1. Open 'Control Panel\All Control Panel Items\Programs and Features'
2. Click on the link 'Turn Window Features on and off'. 'Windows Features dialog' will pop up.
3. In the 'Windows Features dialog' enable
    the feature called 'Acitive Directory Lightweight Directory Services'
4. Start 'Active Directory Lightweight Directory Services Setup Wizard'
    by clicking the appropriate link in the Windows Start Menu
5. Using the wizard create a unique AD LDS instance with the following parameters
   - the type of the instance: 'a unique instance'
   - the name of the instance: AdbookblTestInstance
   - the description of the instance: default value
   - the ldap port number: 55555
   - the ldap ssl port number: 55556
   - create a new partition with the name 'DC=testdata,DC=adbook,DC=local'
   - Data files location: default value
   - Recovery files location: default value
   - Service account: network service account
   - AD LDS Administration account: default value(current user)
   - On the page 'Importing LDIF files' select 'MS-User.LDF'
6. Build and run the 'AdBookBL_IntegrationTestsPrepareEnvironment.exe' console application.
    It will populate the adlds instance you've just created with test data.
*/

#include <iostream>
#include <activeds.h>
#include <AdsHlp.h>
#include <atlcomcli.h>
#include <string>
#include <vector>
#include <comutil.h>
#include <strsafe.h>



typedef CComQIPtr<IDispatch, &IID_IDispatch>                IDispatchPtr;
typedef CComQIPtr<IDirectoryObject, &IID_IDirectoryObject>  IDirectoryObjectPtr;


IDirectoryObjectPtr EnsureUserContainerCreated() {
    IDirectoryObjectPtr usersContainerPtr;
    std::wstring usersContainerLdapPath = L"LDAP://localhost:55555/CN=users,DC=testdata,DC=adbook,DC=local";

    HRESULT hr = ADsGetObject(usersContainerLdapPath.c_str(),
        IID_IDirectoryObject, reinterpret_cast<void **>(&usersContainerPtr.p));
    if (SUCCEEDED(hr)) {
        return usersContainerPtr;
    }

    IDirectoryObjectPtr rootContainerPtr;
    std::wstring rootContainerLdapPath = L"LDAP://localhost:55555/DC=testdata,DC=adbook,DC=local";
    hr = ADsGetObject(rootContainerLdapPath.c_str(),
        IID_IDirectoryObject, reinterpret_cast<void **>(&rootContainerPtr.p));
    if (FAILED(hr)) {
        std::wcout << L"Failed to access: " << rootContainerLdapPath;
        return {};
    }

    wchar_t attrName[] = L"objectClass";
    wchar_t attrValue[] = L"container";
    ADSVALUE objectClass;
    objectClass.dwType = ADSTYPE_CASE_IGNORE_STRING;
    objectClass.CaseIgnoreString = attrValue;

    ADS_ATTR_INFO attrInfo[] {
        { attrName, ADS_ATTR_UPDATE, ADSTYPE_CASE_IGNORE_STRING, &objectClass, 1 }
    };

    IDispatchPtr dispPtr;
    wchar_t usersContainerRDN[] = L"CN=users";
    hr = rootContainerPtr->CreateDSObject(usersContainerRDN, &attrInfo[0],
        _countof(attrInfo), &dispPtr.p);
    if (FAILED(hr) && (hr != HRESULT_FROM_WIN32(ERROR_OBJECT_ALREADY_EXISTS))) {
        std::wcout << L"rootContainerPtr->CreateDSObject() failed: " << hr;
        return {};
    }

    usersContainerPtr = dispPtr;
    return usersContainerPtr;
}


struct UserData {
    wchar_t FirstName[100];
    wchar_t LastName[100];
    wchar_t Organisation[100];
    wchar_t Title[100];
    wchar_t Phone[100];
    wchar_t Email[100];
    wchar_t Country[100];
};

unsigned char testImage[] = {
0xFF, 0xD8, 0xFF, 0xE0, 0x00, 0x10, 0x4A, 0x46, 0x49, 0x46, 0x00, 0x01, 0x01, 0x01, 0x01, 0x2C,
0x01, 0x2C, 0x00, 0x00, 0xFF, 0xDB, 0x00, 0x43, 0x00, 0x0A, 0x07, 0x07, 0x08, 0x07, 0x06, 0x0A,
0x08, 0x08, 0x08, 0x0B, 0x0A, 0x0A, 0x0B, 0x0E, 0x18, 0x10, 0x0E, 0x0D, 0x0D, 0x0E, 0x1D, 0x15,
0x16, 0x11, 0x18, 0x23, 0x1F, 0x25, 0x24, 0x22, 0x1F, 0x22, 0x21, 0x26, 0x2B, 0x37, 0x2F, 0x26,
0x29, 0x34, 0x29, 0x21, 0x22, 0x30, 0x41, 0x31, 0x34, 0x39, 0x3B, 0x3E, 0x3E, 0x3E, 0x25, 0x2E,
0x44, 0x49, 0x43, 0x3C, 0x48, 0x37, 0x3D, 0x3E, 0x3B, 0xFF, 0xDB, 0x00, 0x43, 0x01, 0x0A, 0x0B,
0x0B, 0x0E, 0x0D, 0x0E, 0x1C, 0x10, 0x10, 0x1C, 0x3B, 0x28, 0x22, 0x28, 0x3B, 0x3B, 0x3B, 0x3B,
0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B,
0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B,
0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0xFF, 0xC0,
0x00, 0x11, 0x08, 0x00, 0x40, 0x00, 0x40, 0x03, 0x01, 0x22, 0x00, 0x02, 0x11, 0x01, 0x03, 0x11,
0x01, 0xFF, 0xC4, 0x00, 0x1A, 0x00, 0x00, 0x02, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x06, 0x00, 0x02, 0x07, 0x04, 0x03, 0xFF, 0xC4, 0x00,
0x3D, 0x10, 0x00, 0x01, 0x03, 0x03, 0x02, 0x02, 0x05, 0x07, 0x0B, 0x03, 0x05, 0x00, 0x00, 0x00,
0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x00, 0x05, 0x11, 0x06, 0x21, 0x12, 0x41, 0x13, 0x14, 0x31,
0x51, 0x61, 0x17, 0x32, 0x36, 0x65, 0x71, 0x81, 0xB3, 0x07, 0x15, 0x16, 0x22, 0x23, 0x83, 0x84,
0x91, 0xA1, 0xA4, 0xE2, 0x24, 0x42, 0x43, 0x52, 0x55, 0xA3, 0xD1, 0xD2, 0xFF, 0xC4, 0x00, 0x17,
0x01, 0x01, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x01, 0x03, 0x04, 0xFF, 0xC4, 0x00, 0x1D, 0x11, 0x00, 0x02, 0x02, 0x02, 0x03, 0x01,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x11, 0x12, 0x22,
0x03, 0x04, 0x31, 0x61, 0xFF, 0xDA, 0x00, 0x0C, 0x03, 0x01, 0x00, 0x02, 0x11, 0x03, 0x11, 0x00,
0x3F, 0x00, 0xD8, 0xD7, 0xCA, 0xB3, 0x8F, 0x2B, 0x5E, 0xA3, 0xFD, 0xDF, 0xF0, 0xAD, 0x1D, 0x7C,
0xA9, 0x6B, 0x40, 0x7A, 0x15, 0x6F, 0xFB, 0xCF, 0x88, 0xAA, 0x01, 0x77, 0xCA, 0xD7, 0xA8, 0xFF,
0x00, 0x77, 0xFC, 0x2A, 0x79, 0x5A, 0xF5, 0x1F, 0xEE, 0xFF, 0x00, 0x85, 0x68, 0xB5, 0x28, 0x05,
0xDB, 0x26, 0xAC, 0xF9, 0xD2, 0xC9, 0x26, 0xEF, 0x2A, 0x0F, 0x53, 0x8C, 0xC9, 0xC2, 0x4F, 0x4B,
0xC6, 0x5C, 0x3C, 0xF1, 0xB0, 0xE6, 0x40, 0xF6, 0xFB, 0x2B, 0x96, 0x3D, 0xFF, 0x00, 0x52, 0xDC,
0xD0, 0x64, 0x5B, 0xAD, 0x0C, 0x18, 0xC4, 0xE1, 0x25, 0xC5, 0x6E, 0x7D, 0xE5, 0x43, 0x3F, 0x95,
0x13, 0xD5, 0x91, 0x9D, 0x95, 0xA7, 0x24, 0xA1, 0x94, 0x95, 0x29, 0x3C, 0x2B, 0x29, 0x1C, 0xC0,
0x20, 0x9F, 0xD2, 0x87, 0x58, 0xB5, 0x5D, 0xA2, 0x3D, 0x9A, 0x34, 0x79, 0x32, 0x0B, 0x0E, 0xB4,
0x8E, 0x05, 0x24, 0xB6, 0xA3, 0xD9, 0xCF, 0x20, 0x73, 0xAA, 0x27, 0x2D, 0xE9, 0xBA, 0x46, 0x79,
0xCB, 0x7C, 0x5B, 0xA5, 0x47, 0x65, 0xDE, 0xFF, 0x00, 0x2A, 0xD7, 0xD4, 0x5B, 0x30, 0x1D, 0x5B,
0x8F, 0x29, 0xBE, 0x94, 0xA5, 0xBE, 0x24, 0xEF, 0x9C, 0xA1, 0x24, 0x1D, 0xD7, 0xB6, 0xC2, 0xAF,
0x61, 0xBF, 0x3D, 0x76, 0x91, 0x29, 0xA7, 0x61, 0xBC, 0xCF, 0x44, 0xEA, 0xC2, 0x16, 0x5A, 0x29,
0x48, 0x48, 0x20, 0x04, 0xA8, 0xE4, 0xFD, 0x7D, 0xF7, 0x15, 0x5B, 0xCD, 0x99, 0x77, 0xC5, 0x42,
0x97, 0x1A, 0x73, 0xCD, 0xA1, 0x2B, 0x6D, 0x65, 0x21, 0xC2, 0x94, 0xF0, 0x6E, 0x78, 0xD2, 0x31,
0xB2, 0xF7, 0xD8, 0x9A, 0xB5, 0x86, 0xC2, 0xF5, 0xA6, 0x44, 0xA7, 0x5D, 0x98, 0xF3, 0xDD, 0x2B,
0xAB, 0x28, 0x41, 0x74, 0xA9, 0x25, 0x24, 0x82, 0x14, 0xA1, 0x81, 0xF5, 0xF6, 0xDC, 0xD4, 0xEF,
0x9F, 0xC2, 0x56, 0x79, 0xFC, 0x0E, 0xAF, 0x95, 0x2D, 0x68, 0x0F, 0x42, 0xAD, 0xFF, 0x00, 0x79,
0xF1, 0x15, 0x4C, 0xAB, 0xE5, 0x4B, 0x5A, 0x03, 0xD0, 0xAB, 0x7F, 0xDE, 0x7C, 0x45, 0x55, 0xC5,
0xE1, 0xE7, 0xE4, 0xB1, 0x19, 0x21, 0x52, 0x1E, 0x6D, 0xA4, 0x93, 0x80, 0x5C, 0x50, 0x48, 0x3F,
0x9D, 0x06, 0x53, 0xF2, 0x0E, 0xA2, 0x4C, 0x89, 0x37, 0x06, 0x63, 0x5B, 0xDB, 0x4E, 0x18, 0x6F,
0xA7, 0x48, 0xE9, 0xC9, 0x1D, 0xA4, 0x67, 0x71, 0xB9, 0xFC, 0x85, 0x29, 0x6B, 0x59, 0x0E, 0xBD,
0xA8, 0xDE, 0x69, 0x6A, 0x25, 0x0C, 0x25, 0x29, 0x40, 0xE4, 0x32, 0x90, 0x4F, 0xEA, 0x68, 0x13,
0x69, 0x4A, 0xDD, 0x42, 0x54, 0xAE, 0x14, 0x95, 0x00, 0x55, 0xDC, 0x3B, 0xEB, 0x1C, 0xF9, 0xF6,
0xAA, 0xF0, 0xC5, 0xC9, 0xD8, 0xDA, 0xAB, 0xC3, 0x68, 0xA0, 0x6C, 0xB1, 0x63, 0xB8, 0x5E, 0x67,
0xC3, 0xF9, 0xB1, 0xA3, 0x22, 0x11, 0x6C, 0xBA, 0xA5, 0x34, 0x9E, 0x15, 0x71, 0xA7, 0x88, 0x63,
0xBF, 0xC7, 0x22, 0x8B, 0xC5, 0x8E, 0xD4, 0x58, 0xAD, 0x47, 0x67, 0x3D, 0x1B, 0x69, 0x09, 0x4E,
0x4E, 0x76, 0x1E, 0x34, 0x06, 0xCB, 0xE9, 0xAE, 0xA6, 0xFC, 0x2F, 0xC3, 0x35, 0xAE, 0x93, 0xF4,
0xD9, 0x49, 0xFA, 0x32, 0xB6, 0xDA, 0x5B, 0x40, 0x4A, 0x52, 0x12, 0x00, 0xC0, 0x00, 0x60, 0x01,
0x57, 0xA9, 0x52, 0xA4, 0x92, 0x8B, 0xE5, 0x49, 0xF6, 0x9D, 0x41, 0xA6, 0xB4, 0xC5, 0xAD, 0x8B,
0x3B, 0x97, 0xA4, 0x3E, 0xB8, 0xFC, 0x59, 0x71, 0x0D, 0x29, 0x40, 0x92, 0xA2, 0xA3, 0xE6, 0x82,
0x39, 0xF7, 0xD4, 0xD6, 0x4F, 0xCF, 0xBA, 0xDC, 0xA2, 0xE9, 0x8B, 0x73, 0xBD, 0x0A, 0xA5, 0x36,
0x5E, 0x90, 0xE9, 0xC8, 0xC3, 0x63, 0x20, 0x0D, 0xB9, 0x12, 0x0E, 0x7D, 0xDE, 0x34, 0x0A, 0x2D,
0x92, 0x6C, 0x2B, 0x5B, 0xF3, 0x58, 0x6A, 0xD6, 0x1B, 0x33, 0x1A, 0x64, 0x65, 0x95, 0x92, 0x78,
0x1F, 0x4A, 0x06, 0x09, 0x57, 0x61, 0x50, 0xC9, 0xCE, 0xE4, 0x7B, 0xB0, 0x01, 0x1B, 0xAC, 0x3B,
0x7E, 0xAE, 0x79, 0x53, 0xAC, 0x57, 0x16, 0x5E, 0x90, 0x84, 0x61, 0x6C, 0x1C, 0xA5, 0x4A, 0x03,
0x9E, 0x0E, 0x08, 0xEE, 0xEC, 0xC7, 0x8D, 0x01, 0x3A, 0x6E, 0xF2, 0x95, 0x36, 0x93, 0x6D, 0x7F,
0x2E, 0x76, 0x61, 0x39, 0x03, 0xDB, 0xDD, 0xEF, 0xAE, 0x99, 0x5A, 0x62, 0xE9, 0x12, 0xE9, 0x29,
0x50, 0xDD, 0x86, 0xC4, 0xD8, 0x88, 0xEB, 0xCD, 0xAA, 0x32, 0x14, 0x82, 0x52, 0xA2, 0xA0, 0x50,
0x32, 0x48, 0xC0, 0x29, 0x3B, 0x1E, 0xFC, 0x67, 0x1B, 0x53, 0xF5, 0x82, 0xE8, 0x2F, 0x56, 0x38,
0x97, 0x0E, 0x1E, 0x12, 0xF2, 0x3E, 0xB0, 0x1D, 0x81, 0x40, 0xE1, 0x58, 0xF0, 0xC8, 0x35, 0x44,
0xF8, 0x23, 0x27, 0x66, 0x79, 0xF5, 0xE3, 0x27, 0x67, 0xAD, 0xAA, 0x1A, 0xED, 0xF6, 0xB8, 0xF1,
0x1C, 0x70, 0xB8, 0xB6, 0x90, 0x02, 0x94, 0x4E, 0x77, 0xFF, 0x00, 0xAE, 0xEF, 0x0A, 0x11, 0x65,
0xF4, 0xD7, 0x53, 0x7E, 0x17, 0xE1, 0x9A, 0x63, 0xA5, 0xCB, 0x2F, 0xA6, 0xBA, 0x9B, 0xF0, 0xBF,
0x0C, 0xD5, 0xC9, 0x52, 0xA2, 0xF4, 0xA9, 0x50, 0xD1, 0x52, 0xA5, 0x4A, 0x92, 0x44, 0x2D, 0x54,
0x98, 0xB1, 0xB5, 0xBC, 0x09, 0x57, 0x37, 0x1D, 0x62, 0x13, 0xF1, 0x0B, 0x1D, 0x33, 0x4E, 0x29,
0x1C, 0x2B, 0x0A, 0x27, 0x72, 0x9D, 0xF1, 0xB8, 0xFC, 0xFC, 0x28, 0x47, 0x49, 0xA7, 0x13, 0x62,
0x53, 0x62, 0xEA, 0xF1, 0x90, 0x89, 0x98, 0xE0, 0xEB, 0x4E, 0x60, 0xA3, 0xAC, 0x67, 0x88, 0x0C,
0xE3, 0xCC, 0xDF, 0x3D, 0xFB, 0xF6, 0xD6, 0x89, 0x7A, 0xB2, 0xC3, 0xBE, 0xDB, 0xD7, 0x0E, 0x63,
0x7C, 0x48, 0x56, 0xE0, 0x83, 0x85, 0x21, 0x5C, 0x94, 0x0F, 0x23, 0x49, 0xEA, 0xD2, 0x1A, 0xA2,
0x32, 0xDE, 0x6A, 0x2D, 0xDA, 0x24, 0x96, 0x1C, 0x2D, 0x12, 0x65, 0x05, 0x05, 0x12, 0xDA, 0x82,
0x93, 0x9C, 0x03, 0xB8, 0xC0, 0x19, 0xCE, 0xE3, 0xD8, 0x30, 0x00, 0xF9, 0x72, 0x74, 0xD3, 0x57,
0x29, 0xAF, 0xB7, 0x74, 0x90, 0xEB, 0x4D, 0xC1, 0x48, 0x6C, 0x26, 0x5B, 0xA5, 0x4E, 0x39, 0xC4,
0xB3, 0xC2, 0x0E, 0x72, 0x47, 0x9B, 0xB7, 0x66, 0xF5, 0x69, 0x57, 0x7B, 0x86, 0x97, 0xF9, 0x3F,
0xB2, 0xB3, 0x15, 0xEE, 0xAD, 0x31, 0xF5, 0xA9, 0x7E, 0x6A, 0x55, 0xF6, 0x64, 0xA9, 0x5D, 0x84,
0x1F, 0xF5, 0x26, 0x8B, 0x5B, 0x74, 0x3C, 0xA7, 0xA6, 0x19, 0x7A, 0x8A, 0x7A, 0x66, 0x7D, 0xB1,
0x7B, 0xAB, 0x35, 0x9E, 0x8D, 0x4B, 0x3F, 0xDC, 0xAC, 0x81, 0x9E, 0xEC, 0x63, 0xB0, 0x01, 0xD9,
0xB5, 0x5B, 0x50, 0xE8, 0x49, 0x3A, 0x8A, 0xE8, 0xA9, 0x8F, 0xDE, 0xBA, 0x34, 0x81, 0xC2, 0xD3,
0x42, 0x36, 0x43, 0x69, 0xEE, 0xCF, 0x1E, 0xE7, 0xC6, 0x80, 0x48, 0xFA, 0x7F, 0xAA, 0x3F, 0xDD,
0x3F, 0xE0, 0x6F, 0xFF, 0x00, 0x34, 0xD9, 0xF2, 0x6D, 0x70, 0x95, 0x74, 0x9B, 0x7A, 0x9B, 0x35,
0xDE, 0x95, 0xF7, 0x7A, 0x0E, 0x25, 0xF0, 0x84, 0xE7, 0x01, 0x60, 0x6C, 0x36, 0xEC, 0x02, 0xB9,
0xBC, 0x93, 0x7A, 0xF3, 0xF6, 0xBF, 0xCE, 0x98, 0xF4, 0x96, 0x92, 0xFA, 0x2E, 0x65, 0xFF, 0x00,
0x5D, 0xD6, 0xBA, 0xCF, 0x07, 0xF8, 0xB8, 0x38, 0x78, 0x78, 0xBC, 0x4E, 0x7C, 0xEF, 0xD2, 0x80,
0x67, 0xA9, 0x52, 0xA5, 0x01, 0xFF, 0xD9
};



bool CreateUserAccount(IDirectoryObjectPtr usersContainerPtr, UserData & userData) {
    wchar_t objectClassAttrName[] = L"objectClass";
    wchar_t objectClassAttrValue[] = L"user";
    ADSVALUE objectClassValue;
    objectClassValue.dwType = ADSTYPE_CASE_IGNORE_STRING;
    objectClassValue.CaseIgnoreString = objectClassAttrValue;

    wchar_t firstNameAttrName[] = L"givenName";
    wchar_t firstNameAttrValue[100] = L"";
    wcscpy_s(firstNameAttrValue, userData.FirstName);
    ADSVALUE firstNameValue;
    firstNameValue.dwType = ADSTYPE_CASE_IGNORE_STRING;
    firstNameValue.CaseIgnoreString = firstNameAttrValue;

    wchar_t lastNameAttrName[] = L"sn";
    wchar_t lastNameAttrValue[100] = L"";
    wcscpy_s(lastNameAttrValue, userData.LastName);
    ADSVALUE lastNameValue;
    lastNameValue.dwType = ADSTYPE_CASE_IGNORE_STRING;
    lastNameValue.CaseIgnoreString = lastNameAttrValue;

    wchar_t companyAttrName[] = L"company";
    wchar_t companyAttrValue[100] = L"";
    wcscpy_s(companyAttrValue, userData.Organisation);
    ADSVALUE companyValue;
    companyValue.dwType = ADSTYPE_CASE_IGNORE_STRING;
    companyValue.CaseIgnoreString = companyAttrValue;

    wchar_t emailAttrName[] = L"mail";
    wchar_t emailAttrValue[100] = L"";
    wcscpy_s(emailAttrValue, userData.Email);
    ADSVALUE emailValue;
    emailValue.dwType = ADSTYPE_CASE_IGNORE_STRING;
    emailValue.CaseIgnoreString = emailAttrValue;

    wchar_t titleAttrName[] = L"title";
    wchar_t titleAttrValue[100] = L"";
    wcscpy_s(titleAttrValue, userData.Title);
    ADSVALUE titleValue;
    titleValue.dwType = ADSTYPE_CASE_IGNORE_STRING;
    titleValue.CaseIgnoreString = titleAttrValue;

    wchar_t phoneAttrName[] = L"telephoneNumber";
    wchar_t phoneAttrValue[100] = L"";
    wcscpy_s(phoneAttrValue, userData.Phone);
    ADSVALUE phoneValue;
    phoneValue.dwType = ADSTYPE_CASE_IGNORE_STRING;
    phoneValue.CaseIgnoreString = phoneAttrValue;

    wchar_t countryAttrName[] = L"co";
    wchar_t countryAttrValue[100] = L"";
    wcscpy_s(countryAttrValue, userData.Country);
    ADSVALUE countryValue;
    countryValue.dwType = ADSTYPE_CASE_IGNORE_STRING;
    countryValue.CaseIgnoreString = countryAttrValue;

    wchar_t photoAttrName[] = L"thumbnailPhoto";
    unsigned char * photoAttrValue = testImage;
    ADSVALUE photoValue;
    photoValue.dwType = ADSTYPE_OCTET_STRING;
    photoValue.OctetString.lpValue = photoAttrValue;
    photoValue.OctetString.dwLength = _countof(testImage);

    ADS_ATTR_INFO attrInfo[]{
        { objectClassAttrName, ADS_ATTR_UPDATE, ADSTYPE_CASE_IGNORE_STRING, &objectClassValue, 1 },
        { firstNameAttrName, ADS_ATTR_UPDATE, ADSTYPE_CASE_IGNORE_STRING, &firstNameValue, 1 },
        { lastNameAttrName, ADS_ATTR_UPDATE, ADSTYPE_CASE_IGNORE_STRING, &lastNameValue, 1 },
        { companyAttrName, ADS_ATTR_UPDATE, ADSTYPE_CASE_IGNORE_STRING, &companyValue, 1 },
        { emailAttrName, ADS_ATTR_UPDATE, ADSTYPE_CASE_IGNORE_STRING, &emailValue, 1 },
        { titleAttrName, ADS_ATTR_UPDATE, ADSTYPE_CASE_IGNORE_STRING, &titleValue, 1 },
        { phoneAttrName, ADS_ATTR_UPDATE, ADSTYPE_CASE_IGNORE_STRING, &phoneValue, 1 },
        { countryAttrName, ADS_ATTR_UPDATE, ADSTYPE_CASE_IGNORE_STRING, &countryValue, 1 },
        { photoAttrName, ADS_ATTR_UPDATE, ADSTYPE_OCTET_STRING, &photoValue, 1 }
    };

    IDispatchPtr dispPtr;
    wchar_t usersNameRDN[100] = L"CN=";
    wcscat_s(usersNameRDN, userData.FirstName);
    wcscat_s(usersNameRDN, L" ");
    wcscat_s(usersNameRDN, userData.LastName);

    HRESULT hr = usersContainerPtr->CreateDSObject(usersNameRDN, &attrInfo[0],
        _countof(attrInfo), &dispPtr.p);

    if (FAILED(hr) && (hr != HRESULT_FROM_WIN32(ERROR_OBJECT_ALREADY_EXISTS))) {
        std::wcout << L"rootContainerPtr->CreateDSObject() failed: 0x" << std::hex << hr;
        return false;
    }
    return true;
}

void CreateTestUserAccounts() {
    UserData userData[] = {
        {L"Stacey", L"Garcia", L"EnviroSource Design", L"Human resources supervisor", L"732-482-7169", L"StaceyDGarcia@fleckens.hu", L"United States"},
        {L"Ramon",  L"Linden", L"Sure Save", L"Groundskeeper", L"620-670-8632", L"RamonALinden@superrito.com", L"United Mexican States"},
        {L"Stanley", L"Ellis", L"Mages", L"Mechanical engineering technician", L"847-374-7727", L"StanleyEEllis@dayrep.com", L"United States"},
        {L"Kristie", L"Etherton", L"Chess King", L"Escort interpreter", L"203-609-0687", L"KristieREtherton@gustr.com", L"Spain"},
        {L"Tina", L"Ayers", L"Honest Air Group", L"Streetcar operator", L"530-746-7161", L"TinaWAyers@dayrep.com", L"United States"}
    };
    IDirectoryObjectPtr usersContainerPtr= EnsureUserContainerCreated();
    if (usersContainerPtr == nullptr) {
        return;
    }
    for (auto & data : userData) {
        if (!CreateUserAccount(usersContainerPtr, data)) {
            return;
        }
    }
    std::wcout << "Success\n" ;
}

int main()
{
    CoInitialize(NULL);
    CreateTestUserAccounts();
    CoUninitialize();
    std::cout << "Press any key to exit\n";
    std::cin.get();
}


